```
import java.io.*;
import java.util.*;

class Main{
    // 시간 복잡도는 O(n)
    /*

    ** 출처 : https://maivve.tistory.com/225 를 통해 학습하였습니다. **

    이 문제는 ArrayDeque 를 사용해서, Window가 3을 유지한 채 배열을 슬라이딩 하면 됩니다.
    즉, ArrayDeque의 원소 개수는 L개를 유지해야하고,
    ArrayDeque 에 들어가는 원소는 index 입니다.
    Q. 왜 원소의 값을 넣지 않고 index를 넣느냐?
    ->  i - L + 1 ~ i 의 인덱스 중 최솟값을 찾기 때문에, 해당 범위를 벗어나는 원소는 비교대상에서 제외시켜줘야 하기 때문
    ->  값이 가장 낮은 원소가 들어가면 아무리 슬라이딩 해도 해당 원소를 제거할 기준이 없기 때문

    <<< 매커니즘 >>>
    1)  Index를 담는 Deque 생성
        *** Deque는 오름차순 으로 사용할 계획입니다.
    2)  Deque 내의 i - L + 1 ~ i 인덱스를 벗어나는 원소가 있다면 제거 (pollFirst())
    3)  Deque 내에 peekLast() 로 가장 오른쪽에 있는 값을 꺼내보며 Array[i] 의 값과 비교. 그래서, peekLast() 가 더 크면 쓸모없으므로 바로 pollLast() 로 버린다. (더 큰 값이 없을 때 까지 반복)
        *** 여기서 굳이 Deque의 개수를 유지할 필요가 없는게, 몇 개가 들어있든 해당 범위 내 최솟값만 구하면 되기 때문입니다.
    4)  가장 맨 뒤에 인덱스 i 넣기. (add = offer)
    5)  peekFirst() 로 가장 맨 왼쪽의 인덱스를 가져와 최솟값을 얻고, 이를 별도 List에 저장.
    6)  결과 List 출력
    */

    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(st.nextToken());
        int l = Integer.parseInt(st.nextToken());

        int[] arr = new int[n];
        st = new StringTokenizer(br.readLine());

        ArrayDeque<Integer> myDeque = new ArrayDeque<Integer>(); // 배열의 index를 담기 위한 Deque
        // 결과를 배열에 담아도 되고, 바로 StringBuilder에 담아도 된다.
        StringBuilder sb = new StringBuilder();
//		int[] result = new int[n];

        for(int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
            // 범위를 벗어나는 인덱스가 있으면 제거하기(최솟값부터 제거해야 한다. -> 최솟값을 찾고있기 때문)
//			while(!myDeque.isEmpty() && myDeque.peekFirst() <= i - l) {
//				myDeque.removeFirst();
//			}

            if(!myDeque.isEmpty() && myDeque.getFirst() <= i - l) {
                myDeque.removeFirst();
            }
            // 범위 인덱스 내에서 최솟값 인덱스를 넣기 위한 작업.
            // 현재 A[i]보다 큰 것들은 어차피 쓸모없으므로 처분하자.
            while(!myDeque.isEmpty() && arr[myDeque.getLast()] > arr[i]) {
                myDeque.removeLast();
            }
            myDeque.offer(i);	// add : 맨앞에서 바깥쪽으로 push. push : 맨 앞에서 안쪽으로 push
            sb.append(arr[myDeque.getFirst()]).append(" ");
        }
        bw.write(sb.toString());
        bw.flush();
        bw.close();
    }
}
```
