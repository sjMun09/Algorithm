import java.io.*;
import java.util.*;

// 모든 사람이 이해할 수 있게 각 행을 주석처리로 설명해보자.
// 설명함으로써 나도 배워보자.
class Main {
    static int N;
    static double result;
    static double[] percent = new double[4];
    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};
    static boolean[][] visited = new boolean[30][30];

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");

        N = Integer.parseInt(st.nextToken());

        // 조건부 확률
        for (int i = 0; i < 4; i++) {
            percent[i] = Integer.parseInt(st.nextToken()) * 0.01;
            // 위에 0.01을 모를 수도 있다. 쉽게 백분율로 표현한 것이다.
        }

        visited[15][15] = true;
        DFS(15, 15, 0, 1.0);
        /*
        이렇게 초기 값을 설정한 이유가 무엇일까?
        -> 맵의 크기를 [30][30]으로 지정했었다.
        따라서, 로봇이 시작하는 위치를 지도 중앙으로 설정하는 것이다.
        왜? 가세 안하고 가운데에 했을까?
        -> 로봇이 지도를 벗어나지 않고 모든 방향으로 움직일 수 있게 하려고 안전하게 중앙으로 지정했다.
        그럼 3번째 매개변수는 뭐야 ?
        -> 현재까지 이동한 횟수다.
        4번째는 ?
        -> 현재까지의 이동 확률이다. 시작이니까 당연히 1이다 근데, 더블형이니까 1.0으로 초기값 설정.
        로봇이 각 단계를 이동할 때마다 해당 방향으로 확률을 곱해서 정보를 업뎃할 것이다.
        */
        System.out.println(result); // 묻지마시오.
    }

    public static void DFS(int x, int y, int depth, double p) {
        // 종료조건
        if (depth == N) {
            result += p;
            return;
        }
        // 이동방향 확인
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i]; //   4방향의 변화량을 나타낸다.
            // -> 쉽게 말해, 각 축 방향으로의 변화량이다.
            /*
            이 내용이 어려울 수 있으니, 잘 설명해보겠다.
            dx = {0, 0, 1, -1}
            dx[0]: x축 방향으로의 변화량이 0이므로 현재 위치에서 x축으로 변화가 없음(그대로)
            dx[1]: x축 방향으로의 변화량이 0이므로 현재 위치에서 x축으로 변화가 없음(그대로)
            dx[2]: x축 방향으로의 변화량이 1이므로 현재 위치에서 x축으로 1만큼 증가(우로 이동)
            dx[3]: x축 방향으로의 변화량이 -1이므로 현재 위치에서 x축으로 1만큼 감소(좌로 이동)
            dy = {1, -1, 0, 0}
            dy[0]: y축 방향으로의 변화량이 1이므로 현재 위치에서 y축으로 1만큼 증가(상으로 이동)
            dy[1]: y축 방향으로의 변화량이 -1이므로 현재 위치에서 y축으로 1만큼 감소(하로 이동)
            dy[2]: y축 방향으로의 변화량이 0이므로 현재 위치에서 y축의 변화가 없음(그대로)
            dy[3]: y축 방향으로의 변화량이 0이므로 현재 위치에서 y축의 변화가 없음(그대로)
            */

            // 이동 가능한 경우 확인. 
            if (!visited[nx][ny]) {
                visited[nx][ny] = true; // 다음위치 nx,ny가 아직 방문하지 않았다면,
                // 방문표시 true 하고 다음 단계 진행
                // 조건부 확률이며, 재귀
                DFS(nx, ny, depth + 1, p * percent[i]);
                /*
                파라미터가 왜 이렇게 되는지도 모를 수 있다. 충분히 이해한다.
                뎁쓰에 +1은 당연히 다음 깊이로 진행하기 위해서다. (dfs 이론)
                p * percent[i] 은 현재까지의 확률에 다음 이동방향으로의 확률을 곱해주는거다.
                */
                visited[nx][ny] = false; // 방문표시 초기화
            }
        }
    }
}
